/*
 * This file is generated by jOOQ.
 */
package ngari.caroline.jooq.tables;


import java.util.function.Function;

import ngari.caroline.jooq.DefaultSchema;
import ngari.caroline.jooq.Keys;
import ngari.caroline.jooq.tables.records.AnimalsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Animals extends TableImpl<AnimalsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>animals</code>
     */
    public static final Animals ANIMALS = new Animals();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnimalsRecord> getRecordType() {
        return AnimalsRecord.class;
    }

    /**
     * The column <code>animals.id</code>.
     */
    public final TableField<AnimalsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>animals.name</code>.
     */
    public final TableField<AnimalsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>animals.health</code>.
     */
    public final TableField<AnimalsRecord, String> HEALTH = createField(DSL.name("health"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>animals.age</code>.
     */
    public final TableField<AnimalsRecord, String> AGE = createField(DSL.name("age"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>animals.type</code>.
     */
    public final TableField<AnimalsRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR, this, "");

    private Animals(Name alias, Table<AnimalsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Animals(Name alias, Table<AnimalsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>animals</code> table reference
     */
    public Animals(String alias) {
        this(DSL.name(alias), ANIMALS);
    }

    /**
     * Create an aliased <code>animals</code> table reference
     */
    public Animals(Name alias) {
        this(alias, ANIMALS);
    }

    /**
     * Create a <code>animals</code> table reference
     */
    public Animals() {
        this(DSL.name("animals"), null);
    }

    public <O extends Record> Animals(Table<O> child, ForeignKey<O, AnimalsRecord> key) {
        super(child, key, ANIMALS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<AnimalsRecord> getPrimaryKey() {
        return Keys.ANIMALS__PK_ANIMALS;
    }

    @Override
    public Animals as(String alias) {
        return new Animals(DSL.name(alias), this);
    }

    @Override
    public Animals as(Name alias) {
        return new Animals(alias, this);
    }

    @Override
    public Animals as(Table<?> alias) {
        return new Animals(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Animals rename(String name) {
        return new Animals(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Animals rename(Name name) {
        return new Animals(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Animals rename(Table<?> name) {
        return new Animals(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
